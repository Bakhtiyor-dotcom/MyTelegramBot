from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup
from config import BOT_TOKEN
import asyncio

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from apps.guess_the_number import play_guess_game
from apps.calculator import calculate_expression
from apps.loan_calculator import calculate_loan
from apps.rock_paper_scissors import play_rps

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üéÆ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"), types.KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
            [types.KeyboardButton(text="üìÑ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"), types.KeyboardButton(text="‚úÇÔ∏è –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –º–µ–Ω—é:", reply_markup=keyboard)

# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
@dp.message(lambda m: m.text == "üéÆ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
async def guess_number_start(message: types.Message):
    await message.answer("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ:")

@dp.message(lambda m: m.text.isdigit())
async def guess_number_play(message: types.Message):
    user_number = int(message.text)
    response = play_guess_game(user_number)
    await message.answer(response)

is_waiting_calc = False

@dp.message(lambda m: m.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def calculator_start(message: types.Message):
    global is_waiting_calc
    is_waiting_calc = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: 2+2):")

@dp.message(lambda m: is_waiting_calc)
async def calculator_compute(message: types.Message):
    global is_waiting_calc
    result = calculate_expression(message.text)
    await message.answer(result)
    is_waiting_calc = False

# –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
@dp.message(lambda m: m.text == "üìÑ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def credit_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –º–µ—Å—è—Ü–µ–≤ –∏ —Å—Ç–∞–≤–∫—É (–ø—Ä–∏–º–µ—Ä: 100000 12 14.5):")

@dp.message(lambda m: len(m.text.split()) == 3 and all(part.replace('.', '', 1).isdigit() for part in m.text.split()))
async def credit_compute(message: types.Message):
    result = calculate_loan(message.text)
    await message.answer(result)

# –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
@dp.message(lambda m: m.text == "‚úÇÔ∏è –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞")
async def rps_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞.")

@dp.message(lambda m: m.text.lower() in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])
async def rps_play(message: types.Message):
    result = play_rps(message.text.lower())
    await message.answer(result)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
