from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup
from config import BOT_TOKEN
import asyncio

# –ò–º–ø–æ—Ä—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
from apps.guess_the_number import GuessTheNumberGame
from apps.calculator import CalculatorApp
from apps.credit_calculator import CreditCalculatorApp
from apps.rock_paper_scissors import RockPaperScissorsGame

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üéÆ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"), types.KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
            [types.KeyboardButton(text="üìÑ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"), types.KeyboardButton(text="‚úÇÔ∏è –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç —Å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏.\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –º–µ–Ω—é:",
        reply_markup=keyboard
    )

# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
guess_game = GuessTheNumberGame()

@dp.message(lambda m: m.text == "üéÆ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
async def guess_number_start(message: types.Message):
    guess_game.start_game()
    await message.answer("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")

@dp.message(lambda m: guess_game.is_active)
async def guess_number_play(message: types.Message):
    response = guess_game.check_guess(message.text)
    await message.answer(response)

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
calc_app = CalculatorApp()

@dp.message(lambda m: m.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def calculator_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 + 2):")
    calc_app.awaiting_input = True

@dp.message(lambda m: calc_app.awaiting_input)
async def calculator_compute(message: types.Message):
    result = calc_app.calculate(message.text)
    await message.answer(result)
    calc_app.awaiting_input = False

# –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
credit_app = CreditCalculatorApp()

@dp.message(lambda m: m.text == "üìÑ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def credit_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –º–µ—Å—è—Ü–µ–≤ –∏ —Å—Ç–∞–≤–∫—É (–ø—Ä–∏–º–µ—Ä: 100000 12 14.5):")
    credit_app.awaiting_input = True

@dp.message(lambda m: credit_app.awaiting_input)
async def credit_compute(message: types.Message):
    result = credit_app.calculate(message.text)
    await message.answer(result)
    credit_app.awaiting_input = False

# –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
rps_game = RockPaperScissorsGame()

@dp.message(lambda m: m.text == "‚úÇÔ∏è –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞")
async def rps_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞.")

@dp.message(lambda m: m.text.lower() in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])
async def rps_play(message: types.Message):
    result = rps_game.play(message.text.lower())
    await message.answer(result)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
